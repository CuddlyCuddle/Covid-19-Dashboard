library(flexdashboard)
library(htmltools)
library(htmlwidgets)
library(ggplot2)
library(dplyr)
library(DT)
library(leaflet)
library(rgdal)
library(RColorBrewer)
library(plotly)
library(zoo)
library(scales)
library(shiny)
library(rsconnect)
library(gapminder)
library(sp)
library(stats)
read.csv("owid-covid-data.csv", header = T)
deployApp("C:/Users/jeanp/OneDrive/Documents/GitHub/Covid-19 Dashboard/shinyApp/Covid-19_Dashboard")
deployApp("C:/Users/jeanp/OneDrive/Documents/GitHub/Covid-19 Dashboard/shinyApp/Covid-19_Dashboard.rmd")
deployApp("C:/Users/jeanp/OneDrive/Documents/GitHub/Covid-19 Dashboard/shinyApp/Covid-19_Dashboard.rmd")
deployApp("C:/Users/jeanp/OneDrive/Documents/GitHub/Covid-19 Dashboard/shinyApp/Covid-19_Dashboard.rmd")
deployApp("C:/Users/jeanp/OneDrive/Documents/GitHub/Covid-19 Dashboard/shinyApp/Covid-19_Dashboard.rmd")
data <- read.csv('https://covid.ourworldindata.org/data/owid-covid-data.csv', header = T)
cum_dat <- data %>%
filter(as.Date(date) == max(as.Date(date))) %>%
select(iso_code,
Country = location,
continent,
Population = population,
Cases = total_cases,
Deaths = total_deaths,
population_density,
median_age,
gdp_per_capita,
extreme_poverty,
cvd_death_rate,
diabetes_prevalence,
life_expectancy) %>%
mutate(Mortality = round(Deaths/Cases*100, 3)) %>%
arrange(desc(Cases))
library(flexdashboard)
library(htmltools)
library(htmlwidgets)
library(ggplot2)
library(dplyr)
library(DT)
library(leaflet)
library(rgdal)
library(RColorBrewer)
library(plotly)
library(zoo)
library(scales)
library(shiny)
library(rsconnect)
library(gapminder)
library(sp)
library(stats)
cum_dat <- data %>%
filter(as.Date(date) == max(as.Date(date))) %>%
select(iso_code,
Country = location,
continent,
Population = population,
Cases = total_cases,
Deaths = total_deaths,
population_density,
median_age,
gdp_per_capita,
extreme_poverty,
cvd_death_rate,
diabetes_prevalence,
life_expectancy) %>%
mutate(Mortality = round(Deaths/Cases*100, 3)) %>%
arrange(desc(Cases))
View(data)
cum_dat <- data %>%
filter(as.Date(date) == max(as.Date(date))) %>%
select(iso_code,
Country = location,
continent,
Population = population,
Cases = total_cases,
Deaths = total_deaths,
population_density,
median_age,
gdp_per_capita,
extreme_poverty,
cardiovasc_death_rate,
diabetes_prevalence,
life_expectancy) %>%
mutate(Mortality = round(Deaths/Cases*100, 3)) %>%
arrange(desc(Cases))
View(data)
world_dat
world_dat <- data %>%
filter(location == "World") %>%
mutate(date = as.Date(date),
new_cases_SMA7 = rollmean(new_cases, k = 7, align = "center", fill = NA))
View(world_dat)
#Creating a Subsetted Dataframe
world_dat <- data %>%
filter(location == "World") %>%
mutate(date = as.Date(date),
new_cases_SMA7 = rollmean(new_cases, k = 7, align = "center", fill = NA),
Infectious = rollmean(new_cases, k = 14, align = "right", fill = NA)*14)
#Creating Plot
fig <- plot_ly(world_dat,
x = ~date,
y = ~new_cases,
type = "bar",
name = "New Cases"
)
#Adding Moving Averages
fig <- fig %>% add_trace(y = ~new_cases_SMA7,
name = "7-Day Moving Average",
type = "scatter",
mode = "lines",
line = list(color = 'rgb(250, 162, 0)'))
fig <- fig %>% layout(yaxis = list(title = "New Cases"),
xaxis = list(title = "Date")
)
fig
fig <- plot_ly(world_dat, x = ~date, y = ~population-total_cases, name = "Suseptible", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~total_cases, name = "2-Week Cumulative <\br> New Cases", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~total_cases, name = "Removed", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~total_deaths, name = "Deaths", type = 'scatter', mode = 'lines')
fig <- fig %>% layout(xaxis = list(title = "Date"), yaxis = list(title = "Population"))
fig
fig <- plot_ly(world_dat, x = ~date, y = ~population-total_cases, name = "Suseptible", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~Infectious, name = "2-Week Cumulative <\br> New Cases", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~total_cases, name = "Removed", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~total_deaths, name = "Deaths", type = 'scatter', mode = 'lines')
fig <- fig %>% layout(xaxis = list(title = "Date"), yaxis = list(title = "Population"))
fig
fig <- plot_ly(world_dat, x = ~date, y = ~population-total_cases, name = "Suseptible", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~Infectious, name = "2-Week Cumulative </br> New Cases", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~total_cases, name = "Removed", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~total_deaths, name = "Deaths", type = 'scatter', mode = 'lines')
fig <- fig %>% layout(xaxis = list(title = "Date"), yaxis = list(title = "Population"))
fig
#Creating a Subsetted Dataframe
world_dat <- data %>%
filter(location == "World") %>%
mutate(date = as.Date(date),
new_cases_SMA7 = rollmean(new_cases, k = 7, align = "center", fill = NA),
Infectious = rollmean(new_cases, k = 14, align = "right", fill = NA)*14,
removed = lag(total_cases, 14))
#Creating Plot
fig <- plot_ly(world_dat,
x = ~date,
y = ~new_cases,
type = "bar",
name = "New Cases"
)
#Adding Moving Averages
fig <- fig %>% add_trace(y = ~new_cases_SMA7,
name = "7-Day Moving Average",
type = "scatter",
mode = "lines",
line = list(color = 'rgb(250, 162, 0)'))
fig <- fig %>% layout(yaxis = list(title = "New Cases"),
xaxis = list(title = "Date")
)
fig
fig <- plot_ly(world_dat, x = ~date, y = ~population-total_cases, name = "Suseptible", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~Infectious, name = "2-Week of New Cases", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~removed, name = "Removed", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~total_deaths, name = "Deaths", type = 'scatter', mode = 'lines')
fig <- fig %>% layout(xaxis = list(title = "Date"), yaxis = list(title = "Population"))
fig
View(world_dat)
#Creating a Subsetted Dataframe
world_dat <- data %>%
filter(location == "World") %>%
mutate(date = as.Date(date),
new_cases_SMA7 = rollmean(new_cases, k = 7, align = "center", fill = NA),
Infectious = rollmean(new_cases, k = 14, align = "right", fill = 0)*14,
removed = lag(total_cases, 14, fill = 0))
#Creating Plot
fig <- plot_ly(world_dat,
x = ~date,
y = ~new_cases,
type = "bar",
name = "New Cases"
)
#Adding Moving Averages
fig <- fig %>% add_trace(y = ~new_cases_SMA7,
name = "7-Day Moving Average",
type = "scatter",
mode = "lines",
line = list(color = 'rgb(250, 162, 0)'))
fig <- fig %>% layout(yaxis = list(title = "New Cases"),
xaxis = list(title = "Date")
)
fig
fig <- plot_ly(world_dat, x = ~date, y = ~population-total_cases, name = "Suseptible", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~Infectious, name = "2-Week of New Cases", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~removed, name = "Removed", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~total_deaths, name = "Deaths", type = 'scatter', mode = 'lines')
fig <- fig %>% layout(xaxis = list(title = "Date"), yaxis = list(title = "Population"))
fig
#Creating a Subsetted Dataframe
world_dat <- data %>%
filter(location == "World") %>%
mutate(date = as.Date(date),
new_cases_SMA7 = rollmean(new_cases, k = 7, align = "center", fill = NA),
Infectious = rollmean(new_cases, k = 14, align = "right", fill = 0)*14,
removed = lag(total_cases, 14, default = 0))
#Creating Plot
fig <- plot_ly(world_dat,
x = ~date,
y = ~new_cases,
type = "bar",
name = "New Cases"
)
#Adding Moving Averages
fig <- fig %>% add_trace(y = ~new_cases_SMA7,
name = "7-Day Moving Average",
type = "scatter",
mode = "lines",
line = list(color = 'rgb(250, 162, 0)'))
fig <- fig %>% layout(yaxis = list(title = "New Cases"),
xaxis = list(title = "Date")
)
fig
fig <- plot_ly(world_dat, x = ~date, y = ~population-total_cases, name = "Suseptible", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~Infectious, name = "2-Week of New Cases", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~removed, name = "Removed", type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~total_deaths, name = "Deaths", type = 'scatter', mode = 'lines')
fig <- fig %>% layout(xaxis = list(title = "Date"), yaxis = list(title = "Population"))
fig
View(data)
UK_dat <- data %>%
filter(location == "United Kingdom") %>%
select(date, new_cases)
UK_dat
data <- read.csv("owid-covid-data.csv", header = T)
UK_dat <- data %>%
filter(location == "United Kingdom") %>%
select(date, new_cases) %>%
UK_dat
View(UK_dat)
UK_dat <- data %>%
filter(location == "United Kingdom") %>%
select(date, new_cases) %>%
UK_dat
View(UK_dat)
data <- read.csv('https://covid.ourworldindata.org/data/owid-covid-data.csv', header = T)
data <- read.csv('https://covid.ourworldindata.org/data/owid-covid-data.csv', header = T)
View(cum_dat)
View(world_dat)
valueBox("Covid-19 Analysis")
# Creating a Subsetted Dataframe
world_dat <- data %>%
filter(location == "World") %>%
mutate(date = as.Date(date),
new_cases_SMA7 = rollmean(new_cases, k = 7, align = "center", fill = NA),
Infectious = rollmean(new_cases, k = 14, align = "right", fill = 0)*14,
removed = lag(total_cases, 14, default = 0))
#Creating Plot
fig <- plot_ly(world_dat,
x = ~date,
y = ~new_cases,
type = "bar",
name = "New Cases"
)
#Adding Moving Averages
fig <- fig %>% add_trace(y = ~new_cases_SMA7,
name = "7-Day Moving Average",
type = "scatter",
mode = "lines",
line = list(color = 'rgb(250, 162, 0)'))
fig <- fig %>% layout(yaxis = list(title = "New Cases"),
xaxis = list(title = "Date")
)
fig
#Creating Plot
fig <- plot_ly(world_dat,
x = ~date,
y = ~total_cases,
type = "scatter",
mode = "lines",
name = "Total Cases"
)
fig %>% add_trace(y = ~total_deaths, name = "Total Deaths")
fig
#Creating Plot
fig <- plot_ly(world_dat,
x = ~date,
y = ~total_cases,
type = "scatter",
mode = "lines",
name = "Total Cases"
)
fig %>% add_trace(y = ~total_deaths, name = "Total Deaths")
fig
deployApp()
TreeHouse <- read.csv("https://pix-media.priceonomics-media.com/Data+for+TreefortBnB+Puzzle.csv")
# Examining Data
head(TreeHouse)
names(TreeHouse)
str(TreeHouse)
# Changing Variable Names
colnames(TreeHouse) <- c("Id", "City", "State", "Price", "NumberOfReviews")
names(TreeHouse)
# Number of Cities listed in the Dataset
length(unique(TreeHouse$City))
# Identify Typos
Typos <- TreeHouse %>%
count(City) %>%
filter(n < 20)
library(flexdashboard)
library(DT)
library(dplyr)
library(ggplot2)
# Identify Typos
Typos <- TreeHouse %>%
count(City) %>%
filter(n < 20)
Typo.city <- as.vector(Typos$City)
Typos
Typos
# Identify Typos
Typos <- TreeHouse %>%
count(City) %>%
filter(n < 20)
Typo.city <- as.vector(Typos$City)
View(Typos)
# Identify Typos
Typos <- TreeHouse %>%
count(City) %>%
filter(n < 50)
Typo.city <- as.vector(Typos$City)
View(Typos)
# Identify Typos
Typos <- TreeHouse %>%
count(City) %>%
filter(n < 20)
Typo.city <- as.vector(Typos$City)
# Correcting Typos
TreeHouse$City[which(TreeHouse$City %in% Typo.city)] <- c("Long Island City", "Miami", "New York")
# Creating a Table of Median Listing Prices for Tree Houses
datatable(TreeHouse %>%
group_by(City) %>%
summarize(Listings = n(),
Median_Price = median(Price),
AverageQuantityReviews = mean(NumberOfReviews)) %>%
top_n(100, Listings) %>%
arrange(desc(Median_Price)))
# A datatable of Indianapolis Listings
datatable(TreeHouse %>%
filter(City == "Indianapolis") %>%
select(Id, Price, NumberOfReviews))
